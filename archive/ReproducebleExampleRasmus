---
title: "ReproducebleExampleRasmus"
output: html_document
---
Load packages for project
```{r setup, include=FALSE}
options(width = 120)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(skimr)
library(tidymodels)
library(matrixStats)
library(vip)
#library(kernlab)
#library(doParallel)
library(discrim)
library(stacks)
#library(kknn)
```


# Loading data and data curation
```{r load_data}
## Synthetic data for analysis
dfraw <- read_csv("/users/home/candwei/pm_master/cll_tim_compound_infec_n.csv") %>% 
  rename("id" = "...1") 
```

```{r}
df <- dfraw %>% 
  select(-c(id, Patient_id, INFEC_days_after_diag)) %>% 
  mutate(INFEC_after_diag = factor(INFEC_after_diag, levels = c("1", "0")))
```

```{r}
set.seed(42)

# Create random samples of the rows with 20% set aside for testing
df_split <- df %>% 
  initial_split(prop = 0.8)

# Extract the datasets
df_other <- training(df_split)
df_test  <- testing(df_split)

# For the non testing set we create a 75/25 train/validation split
# The original data is then split into 60/20/20 proportions for training, validation and testing
df_val <- vfold_cv(df_other, v = 5)
```

# Define models

## EN
### Elastic net
```{r}
lr_mod_s <- 
  logistic_reg(penalty = tune(), mixture = tune()) %>% 
  set_mode("classification") %>%
  set_engine("glmnet")

lr_wflow <-
  cll_wflow %>%
  add_model(lr_mod_s)

lr_res_s <- 
  tune_grid(
  object = lr_wflow,
  resamples = df_val,
  grid = 3,
  control = ctrl_grid
  )
```

## RF
```{r}
rf_mod_s <-
  rand_forest(
    mtry = tune(),
    min_n = tune(),
    trees = 100,
  ) %>% set_mode("classification") %>%
  set_engine("ranger")

rf_wflow <-
  cll_wflow %>%
  add_model(rf_mod_s)

rf_res_s <- 
  tune_grid(
    object = rf_wflow, 
    resamples = df_val, 
    grid = 3,
    control = ctrl_grid
  )
```

# Create stack
## Create stack
```{r}
cll_st <- 
  stacks() %>%
  add_candidates(lr_res_s) %>%
  add_candidates(rf_res_s) %>%
  blend_predictions(mixture = 1) %>%
  fit_members()

```
